

If we were to set up a Tic-Tac-Toe game, we would want to know whether the board's current state is solved, wouldn't we? Our goal is to create a function that will check that for us!

Assume that the board comes in the form of a 3x3 array, where the value is 0 if a spot is empty, 1 if it is an "X", or 2 if it is an "O", like so:

[[0, 0, 1],
 [0, 1, 2],
 [2, 1, 0]]

We want our function to return:

    -1 if the board is not yet finished AND no one has won yet (there are empty spots),
    1 if "X" won,
    2 if "O" won,
    0 if it's a cat's game (i.e. a draw).

You may assume that the board passed in is valid in the context of a game of Tic-Tac-Toe.
Arrays
Algorithms


function isSolved(board) {
  let empty = 0
  console.log(board)
  for (let i = 0; i < 3; i++) {
    let row = []
    let col = []
    let diag1 = []
    let diag2 = []
    for (let j = 0; j < 3; j++) {
      row.push(board[i][j])
      col.push(board[j][i])
      diag1.push(board[j][j])
      diag2.push(board[2 - j][2 - j])
      if (board[i][j] == 0) {empty++}
    }
    console.log(row,col,diag1,diag2)
    if (match111(row) || match111(col) || match111(diag1) || match111(diag2)) {return 1}
    if (match222(row) || match222(col) || match222(diag1) || match222(diag2)) {return 2}
  }
  return empty == 0 ? 0 : -1
  // TODO: Check if the board is solved!
}

function match111(arr1) {
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] != 1) {return false}
  }
  return true
}
function match222(arr1) {
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] != 2) {return false}
  }
  return true
}


describe("Tests", () => {
  it("test", () => {
// You can use Test.expect(boolean, [optional] string) to test your code
Test.expect(isSolved([[0,0,1],
                      [0,1,2],
                      [2,1,0]]) === -1);
  });
});
