Given a positive number n > 1 find the prime factor decomposition of n. The result will be a string with the following form :

 "(p1**n1)(p2**n2)...(pk**nk)"

with the p(i) in increasing order and n(i) empty if n(i) is 1.

Example: n = 86240 should return "(2**5)(5)(7**2)(11)"



function primeFactors(n){
    //your code here
  for (let i = 1; i < 18; i++) {
    console.log(`For ${i}, the prime is ${getNextPrime(i)}`)
  }
}

function getNextPrime(n) {
  if (n == 1) {return 2}
  let testNum = n + 1
  for (let i = 2; i <= Math.ceil(Math.sqrt(n)); i++) {
    if (testNum % i == 0) {
      return getNextPrime(testNum)
    }
  }
  return testNum
}



describe("Tests", () => {
  it("test", () => {
Test.assertEquals(primeFactors(7775460),"(2**2)(3**3)(5)(7)(11**2)(17)")
Test.assertEquals(primeFactors(0),"")
Test.assertEquals(primeFactors(1),"")
Test.assertEquals(primeFactors(2),"(2)")
Test.assertEquals(primeFactors(-42),"")
Test.assertEquals(primeFactors(120),"(2**3)(3)(5)")
  });
});
