

You are given three integer inputs: length, minimum, and maximum.

Return a string that:

    Starts at minimum
    Ascends one at a time until reaching the maximum, then
    Decends one at a time until reaching the minimum
    repeat until the string is the appropriate length

Examples:

 length: 5, minimum: 1, maximum: 3   ==>  "12321"
 length: 14, minimum: 0, maximum: 2  ==>  "01210121012101"
 length: 11, minimum: 5, maximum: 9  ==>  "56789876567"

Notes:

    length will always be non-negative
    negative numbers can appear for minimum and maximum values
    hyphens/dashes ("-") for negative numbers do count towards the length
    the resulting string must be truncated to the exact length provided
    return an empty string if maximum < minimum or length == 0
    minimum and maximum can equal one another and result in a single number repeated for the length of the string

Fundamentals
Strings
Algorithms


function ascendDescend(length, minimum, maximum) {
  let ans = [minimum], asc = true
  while (ans.join('').length < length) {
    if (asc) {ans.push(ans[ans.length - 1] + 1)}
    if (!asc) {ans.push(ans[ans.length - 1] - 1)}
    if (ans[ans.length - 1] >= maximum) {asc = false}
    if (ans[ans.length - 1] <= minimum) {asc = true}
  }
  if (maximum == minimum) {ans.fill(maximum)}
  if (maximum < minimum) {ans = ['']}
  return ans.join('').slice(0,length)
}


const chai = require("chai");
const assert = chai.assert;

function dotest(length, minimum, maximum, expected) {
  it(`Testing length = ${length}, minimum = ${minimum}, maximum = ${maximum}`, function() {
     assert.equal(ascendDescend(length, minimum, maximum), expected);
  });
  
}
describe("Example Tests", function() {
  dotest(5, 1, 3, "12321");
  dotest(14, 0, 2, "01210121012101");
  dotest(11, 5, 9, "56789876567");
});
