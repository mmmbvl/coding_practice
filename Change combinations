

Write a function that counts how many different ways you can make change for an amount of money, given an array of coin denominations. For example, there are 3 ways to give change for 4 if you have coins with denomination 1 and 2:

1+1+1+1, 1+1+2, 2+2.

The order of coins does not matter:

1+1+2 == 2+1+1

Also, assume that you have an infinite amount of coins.

Your function should take an amount to change and an array of unique denominations for the coins:

  countChange(4, [1,2]) // => 3
  countChange(10, [5,2,3]) // => 4
  countChange(11, [5,7]) //  => 0

Puzzles
Recursion


var countChange = function(money, coins) {
  let ways = new Set(), combo = []
  getChange(money, coins, ways, combo)
  let g = new Array(...ways)
//   console.log(`g: ${g}`)
  return g.length
  // your implementation here
}

function getChange(mny, cns, wys, cmb) {
//   console.log(`getChange for money = ${mny}, combo = ${cmb}`)
  let combo = cmb.concat()
  combo.sort()
  if (mny == 0) {
//     console.log(`*.*.*.* ${combo}`)
    wys.add(combo.join('$'))
    return
  }
  for (let i = 0; i < cns.length; i++) {
    if (mny >= cns[i]) {
//       console.log(`Adding ${cns[i]} to combo: ${combo}`)
      getChange(mny - cns[i], cns, wys, combo.concat(cns[i]))
    }
//     console.log(`Jumping back to next change  money = ${mny}, combo = ${cmb}, cns is at ${cns[i]} in ${cns}`)
  }
}

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(countChange(4, [1,2]), 3, 'Simple case')
Test.assertEquals(countChange(10, [5,2,3]), 4, 'Another simple case')
Test.assertEquals(countChange(11, [5,7]), 0, 'No change')
  });
});
