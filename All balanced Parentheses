rite a function which makes a list of strings representing all of the ways you can balance n pairs of parentheses
Examples

balancedParens(0) => [""]
balancedParens(1) => ["()"]
balancedParens(2) => ["()()","(())"]
balancedParens(3) => ["()()()","(())()","()(())","(()())","((()))"]


function balancedParens(n) {
  let ans = [], str = ''
  findSolns(ans, str, n, 0, 0)
  return ans
}

function findSolns(ans, str, n, open, close) {
  if (close == n) {
    ans.push(str)
  }
  if (open < n) {
    findSolns(ans, str + '(', n, open + 1, close)
  }
  if (open > close) {
    findSolns(ans, str + ')', n, open, close + 1)
  }
}


describe("All Balanced Parentheses",()=>{
  it("Example Tests",()=>{
    Test.assertDeepEquals( balancedParens(0).sort(), [""] );
    Test.assertDeepEquals( balancedParens(1).sort(), ["()"] );
    Test.assertDeepEquals( balancedParens(2).sort(), ["(())","()()"] );
    Test.assertDeepEquals( balancedParens(3).sort(), ["((()))","(()())","(())()","()(())","()()()"] );
    Test.assertDeepEquals( balancedParens(4).sort(), ["(((())))","((()()))","((())())","((()))()","(()(()))","(()()())","(()())()","(())(())","(())()()","()((()))","()(()())","()(())()","()()(())","()()()()"] );
  });
});
