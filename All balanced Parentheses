rite a function which makes a list of strings representing all of the ways you can balance n pairs of parentheses
Examples

balancedParens(0) => [""]
balancedParens(1) => ["()"]
balancedParens(2) => ["()()","(())"]
balancedParens(3) => ["()()()","(())()","()(())","(()())","((()))"]


function balancedParens(n) {
  let ans = new Set
  if (n == 0) {
    ans.add("")
    return new Array(...ans)
  }
  let prev = balancedParens(n - 1)
  prev.forEach(x => {
    ans.add(`${x}()`)
    ans.add(`()${x}`)
    ans.add(`(${x})`)
//    ans.add(`(${x})`)
 //   console.log(`The eval is ${x} and splitting it gets us ${y}`)
//    console.log(`prev is ${prev}`)
    let isol = findIsolates(x)
//    console.log(`Isolates are:`)
 //   isol.forEach(y => console.log(y['counterIdx'], y['counterLength']))
    let arr = isol.map(isolate => {
      let idx = isolate['counterIdx'], len = isolate['counterLength']
      return x.slice(idx, idx + len)
    })
    
//    console.log(`The split string by isolates is: ${arr}`)
    let kryzer = ''
 //   console.log(`arr2 starts off as ${arr2}`)
    for (let i = 0; i < arr.length; i++) {
      kryzer = ''
      for (let j = 0; j < arr.length; j++) {
        if (i == j) {
          kryzer += `(${arr[j]})`
        }
        else {
          kryzer += arr[j]
        }
      }
      ans.add(`${kryzer}`)
  //    console.log(`arr2 is ${arr2}`)
    }
    
//     for (let i = 0; i < x.length - 1; i++) {
// //      console.log(x.slice(i, i + 2))
//       if (x.slice(i, i + 2) == '()') {
//         let tmp = x.split('')
//  //       console.log(`tmp before: ${tmp}`)
//         tmp.splice(i, 2, '')
//         tmp.splice(i, 0, '(())')
// //        console.log(`tmp after: ${tmp} \n           ${tmp.join('')}`)
//         ans.add(`${tmp.join('')}`)
//       }
//     }
//     let arr = x.split('')
//     arr.push("")
//     arr.forEach((y, i) => {
//       let tmp = x.split('')
//       tmp.splice(i, 0, "()")
//       ans.add(tmp.join(''))
//     })
  })
  return new Array(...ans);
}

function findIsolates(str) {
  let results = []
  let counter = 0, counterIdx = 0, counterLength = 0
  for (let i = 0; i < str.length; i++) {
    counterLength++
    if (str[i] == '(') {
      counter++
      if (counter == 1) {
        counterIdx = i
        counterLength = 1
      }
    }
    if (str[i] == ')') {
      counter--
      if (counter == 0) {
        results.push({counterIdx, counterLength})
      }
    }
  }
  return results
}


describe("All Balanced Parentheses",()=>{
  it("Example Tests",()=>{
    Test.assertDeepEquals( balancedParens(0).sort(), [""] );
    Test.assertDeepEquals( balancedParens(1).sort(), ["()"] );
    Test.assertDeepEquals( balancedParens(2).sort(), ["(())","()()"] );
    Test.assertDeepEquals( balancedParens(3).sort(), ["((()))","(()())","(())()","()(())","()()()"] );
    Test.assertDeepEquals( balancedParens(4).sort(), ["(((())))","((()()))","((())())","((()))()","(()(()))","(()()())","(()())()","(())(())","(())()()","()((()))","()(()())","()(())()","()()(())","()()()()"] );
  });
});
