

Given the node object:

Node:
  val: <int>,
  left: <Node> or null,
  right: <Node> or null

write a function compare(a, b) which compares the two trees defined by Nodes a and b and returns true if they are equal in structure and in value and false otherwise.

Examples:

1       1
| \     | \
2  3    2  3
=> true

1       1
| \     | \
3  3    2  3
=> false (values not the same 2 != 3)

1       1
| \     |
2  3    2
        |
        3
=> false (structure not the same)

Binary Trees
Algorithms


// return true if the binary trees rooted and a and b are equal in structure and value
// return false otherwise
function compare(a, b){
  if (!a || !b) {
    return !a && !b
  }
  else {
    return compare(a.left, b.left) && compare(a.right, b.right) && (a.val == b.val)
  }
}

describe("example test", function() {
  var aNode = {val: 1, left: null, right: null};
  var bNode = {val: 1, left: null, right: null};
  var cNode = {val: 2, left: null, right: null};
  
  var results1 = compare(aNode, bNode);
  it("Should return true for equal nodes", function() {
    Test.assertEquals(results1, true, "should return true");
  });
  
  var results2 = compare(aNode, cNode);
  it("Should return fale for non-equal nodes", function() {
    Test.assertEquals(results2, false, "should return false");
  });
});
